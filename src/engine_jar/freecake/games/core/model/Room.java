/** * Copyright (c) 2011, Jason Gardner * All rights reserved. *  * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: *  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package freecake.games.core.model;import java.util.ArrayList;import java.util.Set;import java.util.HashMap;import java.util.Iterator;/* * Room - entity for a Room. */public class Room {    private String description;    private String extendedDescription;    private HashMap exits;        // stores exits of this room.    private ArrayList<Item> items= new ArrayList<Item>();    private boolean wasVisited = false;    public Room(String description, String extendedDescription) {        this.description = description;        this.extendedDescription = extendedDescription;        exits = new HashMap();    }    public void setExits(Room north, Room east, Room south, Room west) {        if(north != null)            exits.put(Direction.north, north);        if(east != null)            exits.put(Direction.east, east);        if(south != null)            exits.put(Direction.south, south);        if(west != null)            exits.put(Direction.west, west);    }        public void addExit(Direction direction, Room room) {        exits.put(direction, room);    }    public void addItem(Item item) {        items.add(item);    }    public void removeItem(Item item) {        items.remove(item);    }    public Item getItem(String itemName) {        for (Item item : items) {            if (item.keywordMatch(itemName)) {                return item;            }        }        return null;    }    public String shortDescription() {        return description;    }    public String longDescription(boolean fullDescription) {        if (extendedDescription != null && (!wasVisited || fullDescription)) {            wasVisited = true;            String itemdescripts = "";            for (Item item : items) {                itemdescripts += "\n" + ((item.wasDropped()) ?                                         "A " + item.getName() + " is lying on the ground" :                                         item.getOriginalDescription());            }            return extendedDescription + itemdescripts;        } else {            String itemlist = "";            for (Item item : items) {                itemlist += "\n" + item.getName();            }            return ((itemlist.length() > 0) ? "\nThe room contains:" + itemlist : null);        }    }    private String exitString() {        String returnString = "Exits:";        Set keys = exits.keySet();        for(Iterator iter = keys.iterator(); iter.hasNext(); )            returnString += " " + iter.next();        return returnString;    }    public Room nextRoom(Direction direction) {        return (Room)exits.get(direction);    }}