/** * Copyright (c) 2011, Jason Gardner * All rights reserved. *  * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: *  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package freecake.games.core;import freecake.games.core.commands.AbstractCommand;import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.LinkedList;import java.util.List;import java.util.StringTokenizer;import jline.ArgumentCompletor;import jline.ConsoleReader;import jline.SimpleCompletor;/* * Parser - this class is responsible for reading the user's input and finding a * command to execute.  It uses the jline library (http://jline.sourceforge.net/) * to provide command history and tab completion. */public class Parser extends Thread {    private AbstractGame gameReference;    public Parser(AbstractGame game) {        gameReference = game;    }    @Override    public void run() {        String line = "";   // will hold the full input line        try {            ConsoleReader reader = new ConsoleReader();            reader.setBellEnabled(false);            List completors = new LinkedList();            String[] allCommands = {};            //find all of the commands that we support, for tab completion            for (AbstractCommand executor : gameReference.getCommandExecutors()) {                allCommands = join(allCommands, executor.getRecognizedCommands());            }            completors.add(new SimpleCompletor(allCommands));            reader.addCompletor(new ArgumentCompletor(completors));            //read input            while ((line = reader.readLine("\n>")) != null) {                if (line.equalsIgnoreCase("quit") || line.equalsIgnoreCase("exit")) {                    System.out.println("Bye");                    break;                } else {                    if (!handleInput(line)) {                        System.out.println("I dont understand the command.");                    }                }            }        } catch (Exception ex) {            ex.printStackTrace();        } finally {            System.exit(1);        }    }    private boolean handleInput(String line) {        StringTokenizer tokenizer = new StringTokenizer(line);        if (tokenizer.hasMoreTokens()) {            String cmd = tokenizer.nextToken();            for (AbstractCommand executor : gameReference.getCommandExecutors()) {                if (Arrays.asList(executor.getRecognizedCommands()).contains(cmd)) {                    //remove unneeded parts of speech                    line = cleanseLine(line);                    System.out.println("");                    gameReference.processCommand(new Command(cmd,                             (tokenizer.hasMoreTokens()) ?                            line.substring(cmd.length() + 1) :                            ""));                    return true;                }            }        }        //no executor for the supplied command        return false;    }    private String cleanseLine(String line) {        //remove unneeded parts of speech        String [] ignoredWords = {          "at",          "the",          "a",          "an"        };        HashSet ignored = new HashSet(Arrays.asList(ignoredWords));        StringTokenizer tokenizer = new StringTokenizer(line);        StringBuilder sb = new StringBuilder();        while (tokenizer.hasMoreTokens()) {            String token = tokenizer.nextToken();            if (!ignored.contains(token)) {                sb.append(token).append(" ");            }        }        String result = sb.toString();        if (result.endsWith(" ")) {            result = result.substring(0, result.length()-1);        }        return result;    }    private String[] join(String[]...arrays) {        final List<String> output = new ArrayList<String>();        for(String[] array : arrays) {                output.addAll(Arrays.asList(array));        }        return output.toArray(new String[output.size()]);    }}